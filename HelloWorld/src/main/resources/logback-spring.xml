<?xml version="1.0" encoding="UTF-8"?>
<!-- scan: 配置文件如果发生改变，将会被重新加载，默认值为 true -->
<!-- scanPeriod: 监测配置文件是否有修改的时间间隔，默认单位是毫秒，默认的时间间隔为 1 分钟 -->
<!-- debug: 设置为 true 时，将打印出 logback 内部日志信息，实时查看 logback 运行状态，默认值为 false -->
<configuration  scan="true" scanPeriod="10 seconds"  debug="true">

    <!-- 定义变量，后面可以通过 ${log.path} 引用 -->
    <property name="log.path" value="./log" />

    <!-- 输出到控制台，
         name 可以是任意名字，最后面要添加到 <root>，
         class 是打印日志的类，ConsoleAppender 是打到控制台 -->
    <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
        <!-- filter 指定用于过滤的类，可以是自定义的，这里是过滤大于等于 info level 的日志 -->
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>info</level>
        </filter>

        <encoder>
            <!-- 输出日志的格式 -->
            <Pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] [%-5level] [%logger{50}] - %msg%n</Pattern>
            <!-- 设置字符集 -->
            <charset>UTF-8</charset>
        </encoder>
    </appender>

    <!-- 输出到文件 -->
    <appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 路径及文件名 -->
        <file>${log.path}/demo.log</file>

        <!-- 此日志文件只记录 info 级别的 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>info</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>

        <!-- 输出日志的格式 -->
        <encoder>
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] [%-5level] [%logger{50}] - %msg%n</pattern>
            <charset>UTF-8</charset>
        </encoder>

        <!-- 日志的滚动策略，按日期，按大小记录 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- 日志归档 -->
            <fileNamePattern>${log.path}/save/demo-%d{yyyy-MM-dd}.%i.log</fileNamePattern>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>100MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
            <!-- 日志文件保留天数 -->
            <maxHistory>15</maxHistory>
        </rollingPolicy>
    </appender>

    <!-- 输出到文件，使用 LogstashEncoder 输出 json 格式的日志 -->
    <appender name="FILE-JSON" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 路径及文件名 -->
        <file>${log.path}/demo-json.log</file>

        <!-- 自定义 filter 只输出 audit 的非 ERROR 日志 -->
        <Filter class="com.example.demo.filter.FileJsonLogAuditFilter" />

        <encoder class="net.logstash.logback.encoder.LogstashEncoder">
            <includeCallerData>true</includeCallerData>
            <customFields>{"group":"example", "service":"demo"}</customFields>
            <timestampPattern>yyyy-MM-dd HH:mm:ss.SSS'Z'</timestampPattern>
            <timeZone>UTC +0</timeZone>
            <fieldNames>
                <timestamp>timestamp</timestamp>
                <thread>thread</thread>
                <logger>logger</logger>
                <message>message</message>
                <level>level</level>
                <callerLine>line</callerLine>
                <!-- 如果不设置为 ignore 的话会打出来 -->
                <version>[ignore]</version>
                <levelValue>[ignore]</levelValue>
                <callerClass>[ignore]</callerClass>
                <callerMethod>[ignore]</callerMethod>
                <callerFile>[ignore]</callerFile>
            </fieldNames>
        </encoder>

        <!-- 日志的滚动策略，按日期，按大小记录 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- 日志归档 -->
            <fileNamePattern>${log.path}/save/demo-json-%d{yyyy-MM-dd}.%i.log</fileNamePattern>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>100MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
            <!-- 日志文件保留天数 -->
            <maxHistory>15</maxHistory>
        </rollingPolicy>
    </appender>

    <root level="info" additivity="true">
        <appender-ref ref="CONSOLE" />
        <appender-ref ref="FILE" />
        <appender-ref ref="FILE-JSON" />
    </root>
</configuration>
